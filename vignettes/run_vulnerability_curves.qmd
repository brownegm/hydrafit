---
title: "Hydrafit: Fit Vulnerability Curves and Percent Loss in Hydraulic Conductance"
vignette: >
  %\VignetteIndexEntry{Fit Vulnerability Curves}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

```{r}
#| label: setup
library(hydrafit)
```

## Fitting model parameters 

Here we fit the model parameters for each species for each of the candidate models using the `fit_vuln_curve()` function. This function uses an annealing process to determine the best parameters for each model type. See `?fitfunctions` to see the model options (i.e., linear, logistic, 2 exponential functions and sigmoidal).

The `fx_select()` function will provide recommendations of fitted models that are within 2 AICcorr units of the selected model. 

```{r run-fits}
data <- scof2012

# outputs for the fits
linear_fits <- list()
logistic_fits <- list()
sigmoidal_fits <- list()
exp1_fits <- list()
exp2_fits <- list()

formula <- kl~psi
# fit the models
suppressWarnings({
for (ii in seq_along(unique(data$species))){
  subset(data, data$species == unique(data$species)[ii], select = c(1:ncol(data))) -> data_by_sp

  linear_fits[[ii]] = hydrafit::fit_vuln_curve(formula, input_df = data_by_sp, model_type = "Linear", plot = T)

  logistic_fits[[ii]] = fit_vuln_curve(formula, data_by_sp, model_type = "log", plot=T)

  sigmoidal_fits[[ii]] = fit_vuln_curve(formula, data_by_sp, model_type= "sig", plot=T)

  exp1_fits[[ii]] = fit_vuln_curve(formula, data_by_sp, model_type = "exp", plot=T)

  exp2_fits[[ii]] = fit_vuln_curve(formula, data_by_sp, model_type= "exp2", plot=T)
 }
})

# select best fitting models
best_model <- fx_select(linear_fits, logistic_fits, sigmoidal_fits, exp1_fits, exp2_fits)

# set parameters for the resamples
fit <- best_model[[1]]

# if you want to look at the fit elements as a data frame
# plot elements do not work for that class
# remove them before transforming the type
fit_noplot <- fit[!sapply(fit, inherits, "gg")]|>as.data.frame()

```

Note the advice from the `fx_select()` function on which other functional forms may also be appropriate for your dataset. It is important to look at plots of the fitted models when deciding to switch the best fitting model to another. 

## Viewing and choosing alternative models

Here is an example plot:
```{r example-plot}
fit$plot # view plot 
```

The best fitting model was the exponential function. To change the model to sigmoidal, for example, you can do as follows:
```{r select-alternative-models}
# CEBE is the first species in the list of models for each model type.
best_model[[1]][c("species","data.type")]

# replace the first element of best_model with the sigmoidal_fit first element
best_model[[1]] <- sigmoidal_fits[[1]]

# check replacement values
best_model[[1]]
```
The model has been successfully been replaced. 

## Saving plots of the fitted models and best fitting models

The `save_plots()` function outputs an image to the working directory looking at the plots is a great way to determine if the fit is appropriate. 
```{r save-output-figures, eval=FALSE}

save_plots("linear_fits.pdf", fit.list = linear_fits)
save_plots("log_fits.pdf", fit.list = logistic_fits)
save_plots("sig_fits.pdf", fit.list = sigmoidal_fits)
save_plots("exp1_fits.pdf", fit.list = exp1_fits)
save_plots("exp2_fits.pdf", fit.list = exp2_fits)

# save the best fitting model
save_plots("best_models.pdf", fit.list = best_model)
```


## Bootstrapping

The bootstrapping function `bootPX` can be used to bootstrap confidence intervals around the water potential at your selected percent loss in hydraulic conductance. The bootstrapping can be done with the `fit_vuln_curve` function but is limited to P50 at 0 and 0.1 MPa. Here you can tune the bootstrap to estimate parameters for the PLC parameters in the fit object. 
```{r bootstrap results}
# run bootstrap for single fit and list of fits
# outputs are lists but you can output as a dataframe, as below:
bootstrap <- bootPX(fit, psi_max=0.1)

bootstrap_list <- bootPX(best_model, psi_max=0.1)

bootstrap_df <- as.data.frame(bootstrap)

bootstrap_list_df <-as.data.frame(do.call(rbind,bootstrap_list))

bootstrap_df
```
